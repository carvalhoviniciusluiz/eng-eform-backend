// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PersonAddress {
  id                       String     @id                  @default(uuid()) @db.VarChar(36)
  number                   String?    @db.VarChar(191)
  zipCode                  String?    @db.VarChar(50)      @map("zip_code")
  publicPlace              String?    @db.VarChar(100)     @map("public_place")
  neighborhood             String?    @db.VarChar(191)
  neighborhoodComplement   String?    @map("neighborhood_complement")
  county                   String?    @db.VarChar(191)
  city                     String?    @db.VarChar(191)
  personId                 String     @db.VarChar(36)      @map("person_id")
  person                   Person     @relation(fields: [personId], references: [id])
  createdAt                DateTime?  @default(now())      @map("created_at")
  updatedAt                DateTime?  @updatedAt           @map("updated_at")
  deleted                  DateTime?
  @@index([personId])
  @@map("address_people")
}

enum DocumentType {
  CPF
  RG
  SUS
  NIS
  WORK_CARD
}

model PersonDocument {
  id             String       @id                     @default(uuid()) @db.VarChar(36)
  documentType   DocumentType @map("document_type")
  documentNumber String       @db.VarChar(191)        @map("document_number")
  shippingDate   DateTime?    @map("shipping_date")
  personId       String       @db.VarChar(36)         @map("person_id")
  person         Person       @relation(fields: [personId], references: [id])
  createdAt      DateTime?    @default(now())         @map("created_at")
  updatedAt      DateTime?    @updatedAt              @map("updated_at")
  deleted        DateTime?
  @@index([documentType, documentNumber, personId])
  @@map("document_people")
}

enum ContactType {
  EMAIL
  CELL_PHONE
  HOME_PHONE
}

model PersonContact {
  id             String      @id                  @default(uuid()) @db.VarChar(36)
  contactType    ContactType @map("contact_type")
  contact        String      @db.VarChar(191)
  personId       String      @db.VarChar(36)      @map("person_id")
  person         Person      @relation(fields: [personId], references: [id])
  createdAt      DateTime?   @default(now())      @map("created_at")
  updatedAt      DateTime?   @updatedAt           @map("updated_at")
  deleted        DateTime?
  @@index([personId])
  @@map("contact_people")
}

model Person {
  id                String                 @id                @default(uuid()) @db.VarChar(36)
  name              String                 @db.VarChar(191)
  socialName        String?                @db.VarChar(191)   @map("social_name")
  birthDate         DateTime?              @map("birth_date")
  adresses          PersonAddress[]
  documents         PersonDocument[]
  contacts          PersonContact[]
  personalData      PersonQuestionAnswer[]
  details           PersonInputDetail[]
  createdAt         DateTime?              @default(now())    @map("created_at")
  updatedAt         DateTime?              @updatedAt         @map("updated_at")
  deleted           DateTime?
  @@index([name, socialName])
  @@map("people")
}

model PersonInput {
  id                        String     @id @default(uuid()) @db.VarChar(36)
  number                    String     @db.VarChar(22)
  personInputQuestionAnswer PersonInputQuestionAnswer[]
  details                   PersonInputDetail[]
  createdAt                 DateTime?  @default(now())  @map("created_at")
  updatedAt                 DateTime?  @updatedAt       @map("updated_at")
  deleted                   DateTime?
  @@index([number])
  @@map("person_inputs")
}

enum PersonType {
  VICTIM
  AGGRESSOR
}

model PersonInputDetail {
  id                  String         @id @default(uuid())    @db.VarChar(36)
  personInputId       String         @db.VarChar(36)         @map("person_input_id")
  personInput         PersonInput    @relation(fields: [personInputId], references: [id])
  personId            String         @db.VarChar(36)         @map("person_id")
  person              Person         @relation(fields: [personId], references: [id])
  personType          PersonType     @map("person_type")
  createdAt           DateTime?      @default(now())         @map("created_at")
  updatedAt           DateTime?      @updatedAt              @map("updated_at")
  deleted             DateTime?
  @@index([personInputId, personId])
  @@map("person_input_details")
}

enum Role {
  USER
  ADMIN
  MASTER
}

model User {
  id               String    @id                     @default(uuid()) @db.VarChar(36)
  email            String    @unique                 @db.VarChar(191)
  username         String?   @db.VarChar(191)
  role             Role      @default(USER)
  passwordHashed   String?   @map("password_hashed") @db.VarChar(191)
  companyId        String?   @db.VarChar(36)         @map("company_id")
  company          Company?  @relation(fields: [companyId], references: [id])
  ownerForms       Form[]
  createdAt        DateTime? @default(now())         @map("created_at")
  updatedAt        DateTime? @updatedAt              @map("updated_at")
  deleted          DateTime?
  @@index([email, companyId])
  @@map("users")
}

model Company {
  id        String         @id              @default(uuid()) @db.VarChar(36)
  name      String?        @db.VarChar(191)
  initials  String         @db.VarChar(100)
  code      Int            @unique
  users     User[]
  forms     FormConsumer[]
  createdAt DateTime?      @default(now())  @map("created_at")
  updatedAt DateTime?      @updatedAt       @map("updated_at")
  deleted   DateTime?
  @@index([initials])
  @@map("companies")
}

enum FormSegment {
  PUBLIC
  CAD_PERSON
}

enum FormStatus {
  PUBLISHED
  DRAFT
  REMOVED
}

model Form {
  id                         String           @id               @default(uuid()) @db.VarChar(36)
  name                       String?          @db.VarChar(191)
  authorId                   String           @db.VarChar(36)   @map("author_id")
  author                     User             @relation(fields: [authorId], references: [id])
  authorDraft                Json             @map("author_draft")
  segment                    FormSegment?     @default(PUBLIC)
  status                     FormStatus?      @default(DRAFT)
  questions                  Question[]
  questionAnswers            QuestionAnswer[]
  companies                  FormConsumer[]
  personInputQuestionAnswers PersonInputQuestionAnswer[]
  order                       Int              @default(999)
  createdAt                   DateTime?        @default(now())  @map("created_at")
  updatedAt                   DateTime?        @updatedAt       @map("updated_at")
  deleted                     DateTime?
  @@index([authorId])
  @@map("forms")
}

model FormConsumer {
  id        String    @id @default(uuid()) @db.VarChar(36)
  formId    String    @db.VarChar(36)      @map("form_id")
  form      Form      @relation(fields: [formId], references: [id])
  companyId String    @db.VarChar(36)      @map("company_id")
  company   Company   @relation(fields: [companyId], references: [id])
  createdAt DateTime? @default(now())      @map("created_at")
  updatedAt DateTime? @updatedAt           @map("updated_at")
  deleted   DateTime?
  @@index([formId, companyId])
  @@map("form_consumers")
}

enum QuestionType {
  NONE
  OBJECTIVE
  MULTIPLE
  PLAIN_TEXT
}

model Question {
  id              String           @id               @default(uuid())
  content         String?
  formId          String           @map("form_id")   @db.VarChar(36)
  form            Form             @relation(fields: [formId], references: [id])
  children        Question[]       @relation("children")
  parentId        String?          @db.VarChar(36)   @map("parent_id")
  parent          Question?        @relation("children", fields: [parentId], references: [id])
  type            QuestionType?    @default(OBJECTIVE)
  order           Int              @default(999)
  answers         Answer[]
  questionAnswers QuestionAnswer[]
  createdAt       DateTime?        @default(now())  @map("created_at")
  updatedAt       DateTime?        @updatedAt       @map("updated_at")
  deleted         DateTime?
  @@index([formId, parentId])
  @@map("questions")
}

model Answer {
  id              String           @id                 @default(uuid()) @db.VarChar(36)
  content         String           @db.VarChar(191)
  hasContent      Boolean?         @db.Boolean()       @default(false) @map("has_content")
  isDefault       Boolean?         @db.Boolean()       @default(false) @map("is_default")
  questionId      String           @db.VarChar(36) @map("question_id")
  order           Int              @default(999)
  question        Question         @relation(fields: [questionId], references: [id])
  questionAnswers QuestionAnswer[]
  createdAt       DateTime?        @default(now())     @map("created_at")
  updatedAt       DateTime?        @updatedAt          @map("updated_at")
  deleted         DateTime?
  @@index([questionId])
  @@map("answers")
}

model QuestionAnswer {
  id         String                 @id                 @default(uuid()) @db.VarChar(36)
  formId     String                 @db.VarChar(36)     @map("form_id")
  form       Form                   @relation(fields: [formId], references: [id])
  questionId String                 @db.VarChar(36)     @map("question_id")
  question   Question               @relation(fields: [questionId], references: [id])
  answerId   String?                @db.VarChar(36)     @map("answer_id")
  answer     Answer?                @relation(fields: [answerId], references: [id])
  response   String?                @db.Text()
  people     PersonQuestionAnswer[]
  inputs     PersonInputQuestionAnswer[]
  createdAt  DateTime?              @default(now())     @map("created_at")
  updatedAt  DateTime?              @updatedAt          @map("updated_at")
  deleted    DateTime?
  @@index([formId, questionId, answerId])
  @@map("question_answers")
}

model PersonQuestionAnswer {
  id                  String         @id @default(uuid()) @db.VarChar(36)
  personId            String         @db.VarChar(36)      @map("person_id")
  person              Person         @relation(fields: [personId], references: [id])
  questionAnswerId    String         @db.VarChar(36)      @map("question_answer_id")
  questionAnswer      QuestionAnswer @relation(fields: [questionAnswerId], references: [id])
  createdAt           DateTime?      @default(now())      @map("created_at")
  updatedAt           DateTime?      @updatedAt           @map("updated_at")
  deleted             DateTime?
  @@index([personId, questionAnswerId])
  @@map("person_question_answers")
}

model PersonInputQuestionAnswer {
  id                  String         @id @default(uuid())       @db.VarChar(36)
  personInputId       String         @db.VarChar(36)            @map("person_input_id")
  personInput         PersonInput    @relation(fields: [personInputId], references: [id])
  formId              String         @db.VarChar(36)            @map("form_id")
  form                Form           @relation(fields: [formId], references: [id])
  questionAnswerId    String         @db.VarChar(36)            @map("question_answer_id")
  questionAnswer      QuestionAnswer @relation(fields: [questionAnswerId], references: [id])
  createdAt           DateTime?      @default(now())            @map("created_at")
  updatedAt           DateTime?      @updatedAt                 @map("updated_at")
  deleted             DateTime?
  @@index([personInputId, formId, questionAnswerId])
  @@map("person_input_question_answers")
}
