// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// uncomment in case of development..
//
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "erd.png"
// }
//
// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "dbml"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PersonAddress {
  id             String    @id                  @default(uuid())
  number         String    @db.VarChar(191)
  zipCode        String    @db.VarChar(50)      @map("zip_code")
  publicPlace    String    @map("public_place") @db.VarChar(100)
  neighborhood   String    @db.VarChar(191)
  neighborhoodComplement   String               @map("neighborhood_complement")
  city           String    @db.VarChar(191)
  county         String    @db.VarChar(191)
  personId       String    @map("person_id")
  person         Person    @relation(fields: [personId], references: [id])
  createdAt      DateTime? @default(now())      @map("created_at")
  updatedAt      DateTime? @updatedAt           @map("updated_at")
  deleted        DateTime?
  @@index([personId])
  @@map("address_people")
}

enum DocumentType {
  CPF
  RG
  SUS
  NIS
  WORK_CARD
}

model PersonDocument {
  id             String       @id                     @default(uuid())
  documentType   DocumentType @map("document_type")
  documentNumber String       @map("document_number") @db.VarChar(191)
  shippingDate   DateTime?    @map("shipping_date")
  personId       String       @map("person_id")
  person         Person       @relation(fields: [personId], references: [id])
  createdAt      DateTime?    @default(now())         @map("created_at")
  updatedAt      DateTime?    @updatedAt              @map("updated_at")
  deleted        DateTime?
  @@index([documentType, documentNumber, personId])
  @@map("document_people")
}

enum ContactType {
  EMAIL
  CELL_PHONE
  HOME_PHONE
}

model PersonContact {
  id             String      @id                  @default(uuid())
  contactType    ContactType @map("contact_type")
  contact        String      @db.VarChar(191)
  personId       String      @map("person_id")
  person         Person      @relation(fields: [personId], references: [id])
  createdAt      DateTime?   @default(now())      @map("created_at")
  updatedAt      DateTime?   @updatedAt           @map("updated_at")
  deleted        DateTime?
  @@index([personId])
  @@map("contact_people")
}

model Person {
  id                String           @id                @default(uuid())
  name              String           @db.VarChar(191)
  socialName        String?          @db.VarChar(191)   @map("social_name")
  birthDate         DateTime?        @map("birth_date")
  adresses          PersonAddress[]
  documents         PersonDocument[]
  contacts          PersonContact[]
  forms             PersonForm[]
  createdAt         DateTime?        @default(now())    @map("created_at")
  updatedAt         DateTime?        @updatedAt         @map("updated_at")
  deleted           DateTime?
  @@index([name, socialName])
  @@map("people")
}

enum Role {
  USER
  ADMIN
  MASTER
}

enum FormSegment {
  PUBLIC
  CAD_PERSON
}

enum FormStatus {
  PUBLISHED
  DRAFT
  REMOVED
}

enum QuestionType {
  OBJECTIVE
  MULTIPLE
  PLAIN_TEXT
}

model User {
  id               String    @id                     @default(uuid())
  email            String    @unique                 @db.VarChar(191)
  role             Role      @default(USER)
  passwordHashed   String?   @map("password_hashed") @db.VarChar(191)
  companyId        String?   @map("company_id")
  company          Company?  @relation(fields: [companyId], references: [id])
  ownerForms       Form[]
  createdAt        DateTime? @default(now())         @map("created_at")
  updatedAt        DateTime? @updatedAt              @map("updated_at")
  deleted          DateTime?
  @@index([email, companyId])
  @@map("users")
}

model Company {
  id        String    @id              @default(uuid())
  name      String?   @db.VarChar(191)
  initials  String    @db.VarChar(100)
  users     User[]
  forms     FormConsumer[]
  createdAt DateTime? @default(now())  @map("created_at")
  updatedAt DateTime? @updatedAt       @map("updated_at")
  deleted   DateTime?
  @@index([initials])
  @@map("companies")
}

model Form {
  id              String       @id              @default(uuid())
  name            String?      @db.VarChar(191)
  authorId        String       @map("author_id")
  author          User         @relation(fields: [authorId], references: [id])
  authorDraft     Json         @map("author_draft")
  segment         FormSegment? @default(PUBLIC)
  status          FormStatus?  @default(DRAFT)
  questions       Question[]
  questionAnswers QuestionAnswer[]
  companies       FormConsumer[]
  people          PersonForm[]
  order           Int          @default(0)
  createdAt       DateTime?    @default(now())  @map("created_at")
  updatedAt       DateTime?    @updatedAt       @map("updated_at")
  deleted         DateTime?
  @@index([authorId])
  @@map("forms")
}

model FormConsumer {
  id        String    @id @default(uuid())
  formId    String    @map("form_id")
  form      Form      @relation(fields: [formId], references: [id])
  companyId String    @map("company_id")
  company   Company   @relation(fields: [companyId], references: [id])
  createdAt DateTime? @default(now())  @map("created_at")
  updatedAt DateTime? @updatedAt       @map("updated_at")
  deleted   DateTime?
  @@index([formId, companyId])
  @@map("form_consumers")
}

model PersonForm {
  id        String   @id @default(uuid())
  formId    String   @map("form_id")
  form      Form     @relation(fields: [formId], references: [id])
  personId  String   @map("person_id")
  person    Person   @relation(fields: [personId], references: [id])
  createdAt DateTime? @default(now())  @map("created_at")
  updatedAt DateTime? @updatedAt       @map("updated_at")
  deleted   DateTime?
  @@index([formId, personId])
  @@map("person_forms")
}

model Question {
  id        String        @id              @default(uuid())
  content   String?       @db.VarChar(191)
  formId    String        @map("form_id")
  form      Form          @relation(fields: [formId], references: [id])
  children  Question[]    @relation("children")
  parentId  String?       @map("parent_id")
  parent    Question?     @relation("children", fields: [parentId], references: [id])
  type      QuestionType? @default(OBJECTIVE)
  answers   Answer[]
  questionAnswers QuestionAnswer[]
  createdAt DateTime?     @default(now())  @map("created_at")
  updatedAt DateTime?     @updatedAt       @map("updated_at")
  deleted   DateTime?
  @@index([formId, parentId])
  @@map("questions")
}

model Answer {
  id              String    @id              @default(uuid())
  content         String    @db.VarChar(191)
  hasContent      Boolean?  @db.Boolean()    @default(false) @map("has_content")
  isDefault       Boolean?  @db.Boolean()    @default(false) @map("is_default")
  questionId      String    @map("question_id")
  question        Question  @relation(fields: [questionId], references: [id])
  questionAnswers QuestionAnswer[]
  createdAt       DateTime? @default(now())  @map("created_at")
  updatedAt       DateTime? @updatedAt       @map("updated_at")
  deleted         DateTime?
  @@index([questionId])
  @@map("answers")
}

model QuestionAnswer {
  id         String    @id             @default(uuid())
  formId     String    @map("form_id")
  form       Form      @relation(fields: [formId], references: [id])
  questionId String    @map("question_id")
  question   Question  @relation(fields: [questionId], references: [id])
  answerId   String?   @map("answer_id")
  answer     Answer?   @relation(fields: [answerId], references: [id])
  response   String?   @db.Text()
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt      @map("updated_at")
  deleted    DateTime?
  @@index([formId, questionId, answerId])
  @@map("question_answers")
}
