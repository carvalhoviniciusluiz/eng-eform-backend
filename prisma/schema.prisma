// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// uncomment in case of development..
//
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "erd.png"
// }
//
// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "dbml"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MASTER
}

enum FormStatus {
  PUBLISHED
  DRAFT
  REMOVED
}

enum QuestionType {
  OBJECTIVE
  MULTIPLE
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique @db.VarChar(191)
  role           Role      @default(USER)
  passwordHashed String?   @map("password_hashed") @db.VarChar(191)
  createdAt      DateTime? @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deleted        DateTime?

  forms            Form[]
  publicationForms FormConsumer[]

  companyId String?  @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id])

  @@index([email])
  @@map("users")
}

model Company {
  id        String    @id @default(uuid())
  name      String?   @db.VarChar(191)
  initials  String    @db.VarChar(100)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deleted   DateTime?

  users User[]
  forms Form[]

  @@index([initials])
  @@map("companies")
}

model Form {
  id        String    @id @default(uuid())
  name      String?   @db.VarChar(191)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deleted   DateTime?

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])
  authorId  String  @map("author_id")
  author    User    @relation(fields: [authorId], references: [id])

  authorDraft Json        @map("author_draft")
  status      FormStatus? @default(DRAFT)

  surveys        Survey[]
  formConsumers FormConsumer[]
  questionAnswers QuestionAnswer[]

  @@map("forms")
}

model FormConsumer {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  formId String @map("form_id")
  form   Form   @relation(fields: [formId], references: [id])

  assignedAt DateTime? @map("assigned_at")

  @@map("form_consumers")
}

model Survey {
  id        String    @id @default(uuid())
  name      String?   @db.VarChar(191)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deleted   DateTime?

  formId String @map("form_id")
  form   Form   @relation(fields: [formId], references: [id])

  children Survey[] @relation("children")

  parentId String? @map("parent_id")
  parent   Survey? @relation("children", fields: [parentId], references: [id])

  questions Question[]

  @@index([name])
  @@map("surveys")
}

model Question {
  id        String    @id @default(uuid())
  content   String?   @db.VarChar(191)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deleted   DateTime?

  type QuestionType? @default(OBJECTIVE)

  surveyId String @map("survey_id")
  survey   Survey @relation(fields: [surveyId], references: [id])

  answers Answer[]
  questionAnswers QuestionAnswer[]

  @@map("questions")
}

model Answer {
  id        String    @id @default(uuid())
  content   String    @db.VarChar(191)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deleted   DateTime?

  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  questionAnswers QuestionAnswer[]

  @@map("answers")
}

model QuestionAnswer {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deleted   DateTime?

  formId String   @map("form_id")
  form   Form @relation(fields: [formId], references: [id])

  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  answerId String   @map("answer_id")
  answer   Answer @relation(fields: [answerId], references: [id])

  @@map("question_answers")
}
